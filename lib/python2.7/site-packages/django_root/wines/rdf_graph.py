import os
from urlparse import urljoin

from rdflib import ConjunctiveGraph, URIRef, Literal, Namespace, RDF
from lxml import etree

from models import Wine, WineProducer

PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

VALID_FORMATS = {
    'xml': '.rdf',
    'pretty-xml': '.rdf',
    'turtle': '.ttl',
    'n3': '.n3'
}

BASE = Namespace('http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#') 
RDF = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
RDFS = Namespace('http://www.w3.org/2000/01/rdf-schema#')
VOCAB = Namespace('http://rdf.data-vocabulary.org/#')
WINE = Namespace('http://127.0.0.1:8000/api/v1/wine/')
WINE_PROD = Namespace('http://127.0.0.1:8000/api/v1/wine_producer/')
WHISKY = Namespace('http://vocab.org/whisky/terms/')

class WineRDFDatabase(object):
    
    def __init__(self):
	"""Creates the RDF graph"""
	print 'Initialize RDF graph, set namespace mappings'
	self.classes = self.valid_classes()
	self.graph = ConjunctiveGraph()
	self.graph.bind('base', BASE)
	self.graph.bind('rdf', RDF)
	self.graph.bind('rdfs', RDFS)
	self.graph.bind('vocab', VOCAB)
	self.graph.bind('wine', WINE)
	self.graph.bind('wine_prod', WINE_PROD)
	self.graph.bind('whisky', WHISKY)
	
	for wine in Wine.objects.all():
	    self.add_wine(wine)
	for wine_producer in WineProducer.objects.all():
	    self.add_wine_producer(wine_producer)
	print 'Added %i triples ' % len(self.graph)

    def valid_classes(self):
	"""Returns a list of wine styles in the wines.rdf"""
	classes = set()
	root = etree.parse(os.path.join(PROJECT_ROOT, 'backend', 'wine.rdf'))
	for elem in root.iter():
	    id = '{%s}ID' % RDF
	    if id in elem.attrib:
		classes.add(elem.attrib[id])	
	return classes
	
    def add_wine_producer(self, wine_producer):
	"""Add a WineProducer model to the graph"""
	self.graph.add((URIRef(WINE_PROD[str(wine_producer.id)]),
	    URIRef(RDF['type']), URIRef(BASE['Winery'])))
	self.graph.add((URIRef(WINE_PROD[str(wine_producer.id)]),
	    URIRef(RDF['type']), URIRef(VOCAB['organzation'])))
	self.graph.add((URIRef(WINE_PROD[str(wine_producer.id)]),
	    URIRef(RDF['label']), Literal(wine_producer.name))) 
	self.graph.add((URIRef(WINE_PROD[str(wine_producer.id)]),
	    URIRef(VOCAB['address']), Literal(wine_producer.address))) 

    def add_wine(self, wine):
	"""Add a Wine model to the graph"""
	self.graph.add((URIRef(WINE[str(wine.id)]), URIRef(BASE['hasMaker']), 
	    URIRef(WINE_PROD[str(wine.wine_producer.id)])))
	self.graph.add((URIRef(WINE[str(wine.id)]), URIRef(RDFS['label']), 
	    Literal(wine.name)))
	
	region = wine.region
	if region == 'California' or region.startswith('Santa Barbara'):
	    region = 'CaliforniaRegion'
	if region in self.classes:
	    self.graph.add((URIRef(WINE[str(wine.id)]), URIRef(RDF['locatedIn']), 
	        URIRef(BASE[region])))
	else:
	    self.graph.add((URIRef(WINE[str(wine.id)]), URIRef(RDF['locatedIn']), 
	        Literal(region)))

	style = wine.style.replace(' ','')
	if style.endswith('Port'):
	    style = 'Port'
	if style in self.classes: 
	    self.graph.add((URIRef(WINE[str(wine.id)]), URIRef(RDF['type']), 
		URIRef(BASE[style])))
	#else:
	#    self.graph.add((URIRef(WINE[str(wine.id)]), URIRef(RDF['type']), 
	#	Literal(style)))
	
	if wine.color:
	    self.graph.add((URIRef(WINE[str(wine.id)]), URIRef(BASE['hasColor']), 
		URIRef(BASE[wine.color.replace(' ','')])))
	if wine.percentage_alcohol:
	    self.graph.add((URIRef(WINE[str(wine.id)]),
		URIRef(WHISKY['abv']), Literal(wine.percentage_alcohol)))
	if wine.vintage:
	    self.graph.add((URIRef(WINE[str(wine.id)]),
		URIRef(BASE['hasVintageYear']), Literal(wine.vintage)))

    def remove_resource(self, resource):
	"""Removes from the graph all triples that have `resource` as the 
	subject or object"""
	for triple in self.query_graph(subj=resource, obj=resource):
	    self.graph.remove(triple)
	    
    def query_graph(self, subj=None, pred=None, obj=None, exhaustive=False):
	"""Return a graph of  all triples with subject `subj`, predicate `pred`
	OR object `obj. If `exhaustive`, return all subelements of the given
	arguments (If subj is http://127.0.0.1/api/v1/wine/, return 
	http://127.0.0.1/api/v1/wine/{s} for all s). Arguments must be of type
	URIRef or Literal"""
	g = ConjunctiveGraph()
	for uri_s, uri_p, uri_o in sorted(self.graph):
	    s, p, o = str(uri_s), str(uri_p), str(uri_o)
	    if exhaustive:
		s = s.rpartition('/')[0]
		p = p.rpartition('/')[0]
		o = o.rpartition('/')[0]
	    else:
		s = s[:-1] if s.endswith('/') else s
		p = p[:-1] if p.endswith('/') else p
		o = o[:-1] if o.endswith('/') else o
	    if (subj and subj == s) or (pred and pred == p) or (obj and obj == o):
		g.add((uri_s, uri_p, uri_o))
	return g

    def write_graph(self, format='pretty-xml'):
	"""Serialize the graph to the backend directory"""
	if not format in VALID_FORMATS:
	    raise ValueError('`format` must be xml, pretty-xml, turtle or n3')
	abspath = '%s%s' % \
	    (os.path.join(PROJECT_ROOT, 'backend', 'wine_graph_store'), 
	    VALID_FORMATS[format])
	with open(abspath, 'w') as f:
	    f.write(self.graph.serialize(format=format))

    def read_graph(self, filename):
	"""Replace the graph with the data from this file in the backend dir"""
	if not filename.endswith('rdf'):
	    raise ValueError('`filename` must be an rdf file')
	self.graph = ConjunctiveGraph()
	abspath = os.path.join(PROJECT_ROOT, 'backend', filename) 
	self.graph.parse(abspath, format='xml')
