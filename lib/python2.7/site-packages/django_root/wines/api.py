import os

import yaml
from models import Wine, WineProducer
from rdflib import ConjunctiveGraph, URIRef, Literal, Namespace, RDF
from tastypie import fields
from tastypie import http
from tastypie.authentication import Authentication
from tastypie.authorization import Authorization
from tastypie.exceptions import ImmediateHttpResponse
from tastypie.resources import ModelResource
from tastypie.serializers import Serializer
from tastypie.validation import Validation

import wine_tour

PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

CONTENT_TYPES = {
    'xml': 'application/xml',
    'json': 'application/json',
    'jsonp': 'text/javascript',
    'yaml': 'text/yaml',
    'rdf': 'application/rdf+xml',
    'ttl': 'text/turtle'
}

#Reversed version of CONTENT_TYPES
REV_CONTENT_TYPES = dict((v,k) for k, v in CONTENT_TYPES.iteritems()) 

REQUIRED_WINE_FIELDS = set([
    'name',
    'style',
    'country',
    'region',
    'wine_producer',
    'wine_type'
])

ALLOWABLE_WINE_FIELDS = set([
    'name',
    'appellation',
    'color', 
    'country',
    'fruit_source',
    'percent_new_oak',
    'percentage_alcohol',
    'region',
    'style',
    'vineyard',
    'vintage',
    'wine_producer',
    'wine_sub_region',
    'wine_type',
    'id',
    'resource_uri'
])

class CustomResource(ModelResource):
    def determine_format(self, request):
	"""Provide logic to provide JSON responses as default"""
	if 'format' in request.GET:
	    if request.GET['format'] in CONTENT_TYPES:
		return CONTENT_TYPES[request.GET['format']]
	if 'HTTP_ACCEPT' in request.META and request.META['HTTP_ACCEPT']:
	    if request.META['HTTP_ACCEPT'] in REV_CONTENT_TYPES:
		return request.META['HTTP_ACCEPT']
	return 'application/json'

    def obj_create(self, bundle, request=None, **kwargs):
	super(CustomResource, self).obj_create(bundle, request, **kwargs)
    
    def obj_get(self, request=None, **kwargs):
	"""If no format is explicitly given with the query string,
	use the 'Accept' request header to perform a 303 redirect"""
	print request
	if request.method == 'GET' and not 'format' in request.GET:
	    format = REV_CONTENT_TYPES[request.META['HTTP_ACCEPT']] \
			if 'HTTP_ACCEPT' in request.META and \
			request.META['HTTP_ACCEPT'] in REV_CONTENT_TYPES else 'json'
	    see_other = http.HttpSeeOther()
	    see_other['Location'] = '%s?format=%s' % (request.path, format)
	    raise ImmediateHttpResponse(see_other)
	else:
	    return super(CustomResource, self).obj_get(request, **kwargs)

    def obj_update(self, bundle, request=None, **kwargs):
	super(CustomResource, self).obj_update(bundle, request, **kwargs)
    
    def obj_delete(self, bundle, request=None, **kwargs):
	super(CustomResource, self).obj_delete(bundle, request, **kwargs)

    def rm_slash(self, uri):
	"""Remove trailing slash if it exists"""
	return uri[:-1] if uri.endswith('/') else uri

class CustomSerializer(Serializer):
    formats = ['json', 'jsonp', 'xml', 'yaml', 'rdf', 'ttl']
    content_types = CONTENT_TYPES

    def to_yaml(self, data, options=None):
	"""Remove '!!python/unicode' from all yaml fields"""
	return yaml.safe_dump(self.to_simple(data, options))
    
    def to_rdf(self, data, options=None):
	return self.serialize_rdf(data, 'pretty-xml', options)

    def to_ttl(self, data, options=None):
	return self.serialize_rdf(data, 'turtle', options)
    
    def serialize_rdf(self, data, format, options=None):
	"""Serialize a representation of type `format` from the RDF graph"""
	resource_uri = None
	exhaustive = False

	if isinstance(data, dict):
	    resource_uri = data['objects'][0].data['resource_uri'][0:-2]
	    exhaustive = True
	else:
	    resource_uri = data.data['resource_uri']
	resource_uri = 'http://127.0.0.1:8000' + resource_uri
	if resource_uri.endswith('/'):
	    resource_uri = resource_uri[0:-1]
	g = wine_tour.RDF_DB.query_graph(subj=resource_uri, exhaustive=exhaustive)
	return g.serialize(format=format) 

class WineValidation(Validation):
    def is_valid(self, bundle, request=None):
	if not bundle.data:
	    return {'__all__': 'No data was detected'}

	missing_fields = []
	invalid_fields = []
	
	for field in REQUIRED_WINE_FIELDS:
	    if not field in bundle.data.keys():
		missing_fields.append(field)
	for key in bundle.data.keys():
	    if not key in ALLOWABLE_WINE_FIELDS:
		invalid_fields.append(key)

	errors = missing_fields + invalid_fields if request.method != 'PATCH' \
	    else invalid_fields
	
	if errors:
	    return 'Missing fields: %s; Invalid fields: %s' % \
		    (', '.join(missing_fields), ', '.join(invalid_fields))
	else:
	    return errors

class WineProducerResource(CustomResource):
    wine = fields.ToManyField('wines.api.WineResource', 'wine_set', 
			     related_name='wine_producer')
    class Meta:
	queryset = WineProducer.objects.all()
	resource_name = 'wine_producer'
	authentication = Authentication() #allows all access
	authorization = Authorization() #allows all access
	serializer = CustomSerializer()
    
    def obj_create(self, bundle, request=None, **kwargs):
	super(WineProducerResource, self).obj_update(bundle, request, **kwargs)
	self.sync_rdf_db(bundle)

    def obj_update(self, bundle, request=None, **kwargs):
	super(WineProducerResource, self).obj_update(bundle, request, **kwargs)
	self.sync_rdf_db(bundle)
    
    def obj_delete(self, bundle, request=None, **kwargs):
	super(WineProducerResource, self).obj_update(bundle, request, **kwargs)
	self.sync_rdf_db(bundle)
	
    def sync_rdf_db(self, bundle):
	"""Sync the in memory RDF with the Django database"""
	base_uri = 'http://127.0.0.1:8000'
	wine_tour.RDF_DB.remove_resource(
	    self.rm_slash(base_uri + bundle.data['resource_uri']))
	wine_tour.RDF_DB.add_wine_producer(
	    WineProducer.objects.get(id=int(bundle.data['id'])))

class WineResource(CustomResource):
    wine_producer = fields.ForeignKey(WineProducerResource, 'wine_producer')
    
    class Meta:
	queryset = Wine.objects.all()
	resource_name = 'wine'
	authentication = Authentication() #allows all access
	authorization = Authorization() #allows all access
	validation = WineValidation()
	serializer = CustomSerializer()
	filtering = {
	    'percent_new_oak': ('exact', 'lt', 'gt', 'lte', 'gte'),
	    'percentage_alcohol': ('exact', 'lt', 'gt', 'lte', 'gte'),
	    'color': ('exact', 'startswith'),
	    'style': ('exact', 'startswith')
	    
	}
    
    def obj_create(self, bundle, request=None, **kwargs):
	super(WineResource, self).obj_update(bundle, request, **kwargs)
	self.sync_rdf_db(bundle)

    def obj_update(self, bundle, request=None, **kwargs):
	super(WineResource, self).obj_update(bundle, request, **kwargs)
	self.sync_rdf_db(bundle)
    
    def obj_delete(self, bundle, request=None, **kwargs):
	super(WineResource, self).obj_update(bundle, request, **kwargs)
	self.sync_rdf_db(bundle)
	
    def sync_rdf_db(self, bundle):
	"""Sync the in memory RDF with the Django database"""
	base_uri = 'http://127.0.0.1:8000'
	wine_tour.RDF_DB.remove_resource(
	    self.rm_slash(base_uri + bundle.data['resource_uri']))
	wine_tour.RDF_DB.remove_resource(
	    self.rm_slash(base_uri + bundle.data['wine_producer']))
	wine_tour.RDF_DB.add_wine(Wine.objects.get(id=int(bundle.data['id'])))
	wine_tour.RDF_DB.add_wine_producer(WineProducer.objects.get(
		id=int(self.rm_slash(bundle.data['wine_producer']).rpartition('/')[2])))

    def hydrate_wine_producer(self, bundle):
	"""Use the provided WineProducer ID to properly link a PUT, POST,
	or PATCH to the correct WineProducer instance in the db"""
	#Workaround since tastypie has bug and calls hydrate more than once
	try:
	    int(bundle.data['wine_producer'])
	except ValueError:
	    return bundle
	bundle.data['wine_producer'] = '/api/v1/wine_producer/%s/' % \
					    bundle.data['wine_producer']
	return bundle
